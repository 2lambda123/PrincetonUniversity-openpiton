# Author: Daniel J.Mazure
# Date: 29.09.2021
# Description: GitLab CI configuration script.


workflow:
    rules:
        - !reference [.workflow_default_rules, rules]
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        - if: $CI_PIPELINE_SOURCE == "pipeline"
        - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
          when: never  
        - if: $CI_COMMIT_TAG != null 
        - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"
          when: never # Pushing to main doesn't create pipelines unless there is a tag
  
variables:
    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: none
    # We need to define which is the default configuration for the synthesis
    # Pronoc? 2x2? etc
    DESIGN_OPTIONS: "XTILES=2 YTILES=2 "
    REPOSITORY: meep/FPGA_implementations/AlveoU280/meep_openpiton.git
    DEPLOY_DIR: /home/fpga-runnerMEEP/openpiton_deploy
    # Use a preconfigured RISCV toolchain. This is risky.
    # There should be a scheduled task to regenerate it.
    CI_RISCV_DIR: /home/tools/openpiton/riscv_install
    MYSCRIPT: cicd/gitlab_script_op.sh

.test_rules:
    rules:
        if: ($CI_COMMIT_MESSAGE =~ /#TestCICD/)
        #- when: always

.exclude_ariane:
    rules:
        # Don't do Ariane if this is a Lagarto update
        - if: $CI_PIPELINE_SOURCE == "pipeline" && $CONF=="ariane"
          when: never

.default_rules:
    rules:
        - !reference [.test_rules, rules]        
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        - if: $CI_PIPELINE_SOURCE == "pipeline"  

.lagarto_rules:
    rules:
        - !reference [.default_rules, rules]     
        - !reference [.exclude_ariane, rules] 

.workflow_default_rules:  
  rules:
     if: $CI_COMMIT_MESSAGE =~ /#TestCICD/


.multi_target:
    parallel:
        matrix:
            - CONF: [acme, ariane, pronoc, meep_dvino]
              

stages:  
  - synthesis
  - validation
  - deploy-openpiton
  - push-shell
  - clean
  

###################################
# Synthesis
###################################

synthesis-matrix:
        stage: synthesis
        tags:
            - MEEP_FPGA
        extends: .lagarto_rules 
        parallel: !reference [.multi_target, parallel]       
        interruptible: true
        retry: 1
        variables:        
              #GIT_SUBMODULE_PATHS: ':(exclude)piton/design/chip/tile/ariane'
              GIT_STRATEGY: clone
              GIT_SUBMODULE_STRATEGY: recursive
              GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/openpiton/$CONF
        #retry: 1
        timeout: 6h        
        before_script:
            - !reference [.git_clean, before_script]
            - export PITON_ROOT=`pwd`
            - mkdir -p lagarto
        script:
            ############################
            ## First, update the submodule if the pipeline source is a trigger
            ############################
            - . $MYSCRIPT $COMMIT_SHA $CI_PIPELINE_SOURCE 
            ### Setup OpenPiton
            - echo "ROOT= $PITON_ROOT"
            - source piton/lagarto_setup.sh
            # Clone RISCV toolchain, if the RISCV variable doesn't exists
            # Protosyn target in the Makefile will skip the toolchain configuration            
            - export RISCV=$CI_RISCV_DIR
            - echo "RISCV = $RISCV"
            - echo "VIVADO = $VIVADO_BIN"
            # 2x2 by default
            # A matrix can be created here to synthesize all different options
            - . piton/design/chipset/meep_shell/accelerator_build.sh $CONF nomeep
            #- make protosyn $DESIGN_OPTIONS CORE=lagarto
            - !reference [.check_synth_dcp, script]            
        after_script:
            - mkdir -p logs/${CONF}
            - mkdir -p dcp/${CONF}
            - cp -rf build/alveou280/system/protosyn_logs logs/${CONF}
            - mv dcp/synthesis.dcp dcp/${CONF}/synthesis_${CONF}.dcp
        artifacts:
            when: always
            paths:
                - logs
                - dcp

validation-matrix:
        stage: validation
        variables:                      
              GIT_STRATEGY: clone
        parallel: !reference [.multi_target, parallel]
        tags: 
            - MEEP_FPGA                
        extends: .lagarto_rules
        needs:
            - synthesis-matrix
        script:
            - . cicd/synth_check.sh . logs/${CONF}
        allow_failure: true # pass with errors ...

deploy-lagarto:
        stage: deploy-openpiton
        tags:
            - MEEP_FPGA
        extends: .default_rules
        needs:
            - validation-matrix
        before_script:
            - ls; ls dcp;
            - export TODAY=$(date +"%y%m%d")
            - export OPDIRNAME=${TODAY}_${CI_PIPELINE_ID}
            - export ABSDIR=$DEPLOY_DIR/$OPDIRNAME
            - mkdir -p $ABSDIR 
        script:            
            - cp -rf logs $ABSDIR/
            - cp -rf dcp $ABSDIR/
       

push-lagarto:
        stage: deploy-openpiton
        tags:
            - MEEP_FPGA
        rules:
            - if: $CI_PIPELINE_SOURCE == "pipeline"           
        needs:
            - validation-matrix
        variables:
                GIT_STRATEGY: clone
                GIT_SUBMODULES_STRATEGY: normal 
        before_script:
            - git config --global user.name  meep-ci-runner
            - git config --global user.email meep-ci@bsc.es
        script:
            # Update the submodule, again, as we are in a different job
            - . $MYSCRIPT $COMMIT_SHA $CI_PIPELINE_SOURCE
            - git checkout -b acme_ci/$COMMIT_REF
            - git add piton/design/chip/tile/vas_tile_core
            - git commit -m "CICD triggered by VAS update - $COMMIT_MESG"
            - git remote set-url --push origin "https://gitlab-ci-token:$CI_ACC_TOKEN@gitlab.bsc.es/$REPOSITORY"
            - git push --set-upstream "https://gitlab-ci-token:$CI_ACC_TOKEN@gitlab.bsc.es/$REPOSITORY" acme_ci/$COMMIT_REF
            #### Get the new SHA, and store it so it can be passed to the FPGA trigger job ###
            - NEW_BRANCH=$(git branch --show-current) 
            - echo NEW_BRANCH=$NEW_BRANCH >> branch_info.env
            - echo NEW_BRANCH_SHA=$(git rev-parse $NEW_BRANCH) >> branch_info.env
        artifacts:
            when: always            
            reports:
             dotenv: branch_info.env

# This job is generated when the push-lagarto is not. It is needed
# to create the variables that the fpga-shell-trigger job consumes.
# Those variables need to be created when the pipeline trigger
# is a merge request event too, not only because when is a triggered
# pipeline.

shell-prelaunch:
        stage: deploy-openpiton   
        tags:
            - MEEP_FPGA
        variables:
            GIT_STRATEGY: clone            
        extends: .default_rules
        needs:
            - validation-matrix
        script:
            - NEW_BRANCH=$CI_COMMIT_REF_NAME
            - echo "NEW_BRANCH=$NEW_BRANCH" >> branch_info.env
            - echo "NEW_BRANCH_SHA=$CI_COMMIT_SHA" >> branch_info.env
        artifacts:
            when: always            
            reports:
             dotenv: branch_info.env

               
# This is the last job in the triggered pipeline, which triggers the FPGA shell CICD
# The shell will receive the CI_COMMIT_SHA variable, so it can update the ea_url.txt file
# @ support/acme/ea_url.txt, and do things normally. (make update_sha)
# if the pipeline success, the new ea_url needs to be commited

fpga-shell-trigger:
        stage: push-shell
        extends: .default_rules           
        variables:        
            GIT_STRATEGY: clone
            COMMIT_SHA: $NEW_BRANCH_SHA 
            COMMIT_REF: $NEW_BRANCH
            COMMIT_MESG: $CI_COMMIT_MESSAGE
        trigger: 
                project: meep/FPGA_implementations/AlveoU280/fpga_shell                
                branch: master
                strategy: depend

# TODO: on_failure will not get the trigger dependency, doesn't work.
# We need to decide if it is necessary remove from OpenPiton's repo  
# the release candidates.

clean-on-failure:
    stage: clean
    tags:
        - MEEP_FPGA
    rules:
        - !reference [.default_rules, rules]
        - if: $CI_PIPELINE_SOURCE != "pipeline" 
          when: never          
    when: on_failure
    needs:
        - job: push-lagarto
          optional: true
    script:
        # If the shell pipeline fails, remove the release commit from OpenPiton repo
        - | 
            if git show-ref --quiet refs/heads/acme_ci/$COMMIT_REF; then
                echo "Deleting acme_ci/$COMMIT_REF branch"
                git push -d origin acme_ci/$COMMIT_REF
            fi

#TODO: Maybe a clean job to delete the OpenPiton commit when the shell fails?
##

.git_clean:
    before_script:
        - git config --local --unset http.proxy || true
        - git config --local --unset https.proxy || true

.check_synth_dcp:
  script:
    - |
      if [ ! -f dcp/synthesis.dcp ]; then 
        echo "dcp file has not been created"
        exit 23; 
      fi;        
