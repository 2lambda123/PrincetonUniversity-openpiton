# Author: Daniel J.Mazure
# Date: 29.09.2021
# Description: GitLab CI configuration script.


workflow:
    rules:
        - !reference [.workflow_default_rules, rules]
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        - if: $CI_PIPELINE_SOURCE == "trigger"
        - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
          when: never  
        - if: $CI_COMMIT_TAG != null 
        - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"
          when: never # Pushing to main doesn't create pipelines unless there is a tag
  
variables:
    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: none
    # We need to define which is the default configuration for the synthesis
    # Pronoc? 2x2? etc
    DESIGN_OPTIONS: "XTILES=2 YTILES=2 "
    REPOSITORY: meep/FPGA_implementations/AlveoU280/meep_openpiton.git
    DEPLOY_DIR: /home/fpga-runnerMEEP/openpiton_deploy
    MYSCRIPT: /home/dmazure/workspace/gitlab_script.sh

.default_rules:
  rules:
    if: ($CI_COMMIT_MESSAGE =~ /#TestCICD/)
    #- when: always

.workflow_default_rules:  
  rules:
     if: $CI_COMMIT_MESSAGE =~ /#TestCICD/

stages:  
  - synthesis
  - validation
  - deploy-openpiton
  - push-shell
  

###################################
# Synthesis
###################################

synthesis-ariane:
        stage: synthesis
        tags: 
            - MEEP_FPGA 
        rules:
            - !reference [.default_rules, rules]
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "trigger"
              when: never # Trigger events are for VAS updates
        #except:
        #    changes:
        #        - piton/design/chip/tile/vas_tile_core
        variables:
            GIT_SUBMODULE_PATHS: ':(exclude)piton/design/chip/tile/vas_tile_core'
            GIT_STRATEGY: clone
            GIT_SUBMODULE_STRATEGY: recursive
            GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/openpiton
        retry: 1
        timeout: 6h
        
        before_script:
            - export PITON_ROOT=`pwd`
            - mkdir -p ariane
        script:
            - echo "ROOT= $PITON_ROOT"
            - source piton/ariane_setup.sh
            - make initialize CORE=ariane
            - echo "RISCV = $RISCV"
            - echo "VIVADO = $VIVADO_BIN"
            # 2x2 by default
            - make protosyn $DESIGN_OPTIONS CORE=ariane
            - "[ ! -f /dcp/synthesis.dcp ] && echo \"synthesis failed \" && exit 1"
        after_script:
            - cp -rf build/alveou280/system/protosyn_logs ariane           

        artifacts:
            when: always
            paths:        
                - ariane
                - dcp/synthesis.dcp

synthesis-lagarto:
        stage: synthesis
        tags:
            - MEEP_FPGA
        rules:
            - !reference [.default_rules, rules]
            - if: $CI_PIPELINE_SOURCE == "merge_request_event"
            - if: $CI_PIPELINE_SOURCE == "trigger"          
        variables:        
              GIT_SUBMODULE_PATHS: ':(exclude)piton/design/chip/tile/ariane'
              GIT_STRATEGY: clone
              GIT_SUBMODULE_STRATEGY: recursive
              GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/openpiton
        retry: 1
        timeout: 6h        
        before_script:
            - export PITON_ROOT=`pwd`
            - mkdir -p lagarto
        script:
            ############################
            ## First, update the submodule if the pipeline source is a trigger
            ############################
            - . $MYSCRIPT $COMMIT_SHA $CI_PIPELINE_SOURCE #CI_PIPELINE_TRIGGERED
            ### Setup OpenPiton
            - echo "ROOT= $PITON_ROOT"
            - source piton/lagarto_setup.sh
            - make initialize CORE=lagarto
            - echo "RISCV = $RISCV"
            - echo "VIVADO = $VIVADO_BIN"
            # 2x2 by default
            - make protosyn $DESIGN_OPTIONS CORE=lagarto
            - "[ ! -f /dcp/synthesis.dcp ] && echo \"synthesis failed \" && exit 1"  
        after_script:
            - mkdir -p lagarto
            - cp -rf build/alveou280/system/protosyn_logs lagarto

        artifacts:
            when: always
            paths:
                - lagarto
                - dcp/synthesis.dcp

validation-ariane:
        stage: validation
        tags:
            - MEEP_FPGA
        needs:
            - synthesis-ariane
            # Do we need to setup same rules as the needed job?
        script:
            - |
                echo "Check here the synthesis log searching for critical warnings";
                echo "Timing loops, latches ...";

validation-lagarto:
        stage: validation
        tags:
            - MEEP_FPGA
        needs:
            - synthesis-lagarto
        script:
            - |
                echo "Check here the synthesis log searching for critical warnings";
                echo "Timing loops, latches ..."; 

deploy-lagarto:
        stage: deploy-openpiton
        tags:
            - MEEP_FPGA
        needs:
            - synthesis-lagarto
        before_script:
            - ls; ls dcp;
            - export TODAY=$(date +"%y%m%d")
            - export OPDIRNAME=${TODAY}_${CI_PIPELINE_ID}
            - export ABSDIR=$DEPLOY_DIR/$OPDIRNAME
            - mkdir -p $ABSDIR 
        script:            
            - cp -rf lagarto $ABSDIR
            - cp -rf dcp $ABSDIR/lagarto

push-lagarto:
        stage: deploy-openpiton
        tags:
            - MEEP_FPGA
        needs:
            - validation-lagarto 
        variables:
                GIT_STRATEGY: clone
                GIT_SUBMODULES_STRATEGY: normal 
        before_script:
            - git config --global user.name  meep-ci-runner
            - git config --global user.email meep-ci@bsc.es
        script:
            # Update the submodule, again, as we are in a different job
            - . $MYSCRIPT $COMMIT_SHA $CI_PIPELINE_SOURCE
            - git checkout -b acme_ci/$COMMIT_REF
            - git add piton/design/chip/tile/vas_tile_core
            - git commit -m "CICD triggered by VAS update - $COMMIT_MESG"
            - git remote set-url --push origin "https://gitlab-ci-token:$CI_ACC_TOKEN@gitlab.bsc.es/$REPOSITORY"
            - git push --set-upstream "https://gitlab-ci-token:$CI_ACC_TOKEN@gitlab.bsc.es/$REPOSITORY" acme_ci/$COMMIT_REF

# This is the last job in the triggered pipeline, which triggers the FPGA shell CICD
# The shell will receive the CI_COMMIT_SHA variable, so it can update the ea_url.txt file
# @ support/acme/ea_url.txt, and do things normally. (make update_sha)
# if the pipeline success, the new ea_url needs to be commited

fpga-shell-trigger:
        stage: push-shell
        needs: 
            - push-lagarto
        rules:
            - if: $CI_COMMIT_BRANCH =~ "/^acme_ci/" && $CI_PIPELINE_SOURCE == "push"
        variables:
            COMMIT_SHA: $CI_COMMIT_SHA
        trigger: 
                project: meep/FPGA_implementations/AlveoU280/fpga_shell
                branch: main
                strategy: depend


#TODO: Maybe a clean job to delete the OpenPiton commit when the shell fails?
