// ========== Copyright Header Begin ============================================
// Copyright (c) 2015 Princeton University
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Princeton University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ========== Copyright Header End ============================================

//--------------------------------------------------
// Description:     Top level for FPGA IO
// Author:          Alexey Lavrov
// Company:         Princeton University
// Created:         1/18/2016
//--------------------------------------------------
`include "define.vh"
`include "mc_define.h"
`include "piton_system.vh"
`include "chipset_define.vh"
<%
import pyhplib
import os
                
devices = pyhplib.ReadDevicesXMLFile()
%>
module io_ctrl_top (
    input                               clk,          
    input                               rst_n,
    input                               piton_ready_n,

    input                               uart_boot_en,
    input                               uart_timeout_en,
    output                              test_start,
    input                               test_good_end,
    input                               test_bad_end,

    input                               iob_noc1_valid_in, 
    input   [`NOC_DATA_WIDTH-1:0]       iob_noc1_data_in,  
    output                              iob_noc1_ready_in,

<%
for i in range(1, len(devices)):
    if (devices[i]["name"] == "mem"):
        continue
    print """
    input [`DATA_WIDTH-1:0]             buf_%s_noc2_data,
    input                               buf_%s_noc2_valid,
    output                              %s_buf_noc2_ready,
""" % (devices[i]["name"], devices[i]["name"], devices[i]["name"])
    
    print """
    output [`DATA_WIDTH-1:0]            %s_buf_noc3_data,
    output                              %s_buf_noc3_valid,
    input                               buf_%s_noc3_ready,
""" % (devices[i]["name"], devices[i]["name"], devices[i]["name"])
    if (devices[i]["noc2_in"]):
        print """
    output [`DATA_WIDTH-1:0]            %s_filter_noc2_data,
    output                              %s_filter_noc2_valid,
    input                               filter_%s_noc2_ready,
""" % (devices[i]["name"], devices[i]["name"], devices[i]["name"])
        print """
    input [`DATA_WIDTH-1:0]             filter_%s_noc3_data,
    input                               filter_%s_noc3_valid,
    output                              %s_filter_noc3_ready,
""" % (devices[i]["name"], devices[i]["name"], devices[i]["name"])
%>

`ifdef PITONSYS_UART
    input                               uart_lb_sw,
    input                               uart_rx,
    output                              uart_tx,
`endif // endif PITONSYS_UART

`ifdef PITONSYS_SPI
    /* SD Card Reader Interface */
    input                               sd_clk,
    input                               sd_cd,
    output                              sd_reset,
    output                              sd_clk_out,
    inout                               sd_cmd,
    inout   [3:0]                       sd_dat,
`endif // endif PITONSYS_SPI

    input                               net_axi_clk,
    output                              net_phy_rst_n,

    input                               net_phy_tx_clk,
    output                              net_phy_tx_en,
    output  [3 : 0]                     net_phy_tx_data,
    
    input                               net_phy_rx_clk,
    input                               net_phy_dv,    
    input  [3 : 0]                      net_phy_rx_data,
    input                               net_phy_rx_er,
    
    inout                               net_phy_mdio_io,
    output                              net_phy_mdc
);

wire net_interrupt;
wire uart_interrupt;

wire ciop_iob_rst_n;
assign ciop_iob_rst_n = rst_n & test_start & ~piton_ready_n;

ciop_iob ciop_iob     (
    .chip_clk       (clk),
    .fpga_clk       (clk),
    .rst_n          (ciop_iob_rst_n),

    .noc1_in_val     (iob_noc1_valid_in      ),
    .noc1_in_data    (iob_noc1_data_in       ),
    .noc1_in_rdy     (iob_noc1_ready_in      ),

    .noc2_out_val    (iob_filter_noc2_valid     ),
    .noc2_out_data   (iob_filter_noc2_data     ),
    .noc2_out_rdy    (filter_iob_noc2_ready     ),

    .noc3_in_val     (filter_iob_noc3_valid),
    .noc3_in_data    (filter_iob_noc3_data),
    .noc3_in_rdy   (iob_filter_noc3_ready),
    
    .noc2_in_val     (buf_iob_noc2_valid      ),
    .noc2_in_data    (buf_iob_noc2_data      ),
    .noc2_in_rdy     (iob_buf_noc2_ready      ),
                                       
    .noc3_out_val    (iob_buf_noc3_valid      ),
    .noc3_out_data   (iob_buf_noc3_data      ),
    .noc3_out_rdy    (buf_iob_noc3_ready     ),

    .uart_interrupt (uart_interrupt         ),
    .net_interrupt  (net_interrupt         )
);


`ifdef PITONSYS_SPI
`ifdef PITON_FPGA_SD_BOOT

    /* Bridge between NOCs and SD Card */
    piton_sd_top piton_sd_top (
        .sys_clk                (clk),
        .sd_clk                 (sd_clk),
        .sys_rst                (~rst_n),
        
        .splitter_sd_val        (buf_sd_noc2_valid),
        .splitter_sd_data       (buf_sd_noc2_data),
        .sd_splitter_rdy        (sd_buf_noc2_ready),

        .sd_splitter_val        (sd_buf_noc3_valid),
        .sd_splitter_data       (sd_buf_noc3_data),
        .splitter_sd_rdy        (buf_sd_noc3_ready),

        .sd_cd                  (sd_cd),
        .sd_reset               (sd_reset),
        .sd_clk_out             (sd_clk_out),
        .sd_cmd                 (sd_cmd),
        .sd_dat                 (sd_dat)
        );

`endif
`endif


`ifdef PITONSYS_UART
<%
for i in range(1, len(devices)):
    if devices[i]["name"] == "uart":
        print '''
uart_top        uart_top (
    .axi_clk                    (clk                        ),
    .rst_n                      (rst_n                      ),

    .uart_rx                    (uart_rx                    ),
    .uart_tx                    (uart_tx                    ),
    .uart_interrupt             (uart_interrupt             ),
    .uart_lb_sw                 (uart_lb_sw                 ),

    .uart_boot_en               (uart_boot_en               ),
    .uart_timeout_en            (uart_timeout_en            ),
    .test_start                 (test_start                 ),
    .test_good_end              (test_good_end              ),
    .test_bad_end               (test_bad_end               ),

    .chip_id                    ({1'b1, {(`NOC_CHIPID_WIDTH-1){1'b0}}}),
    .x_id                       (`NOC_X_WIDTH'd%s),
    .y_id                       (`NOC_Y_WIDTH'd0),
    // input from noc2
    .xbar_uart_noc2_valid       (buf_uart_noc2_valid),
    .xbar_uart_noc2_data        (buf_uart_noc2_data ),
    .uart_xbar_noc2_ready       (uart_buf_noc2_ready),

    //output to noc3 
    .uart_xbar_noc3_valid       (uart_buf_noc3_valid),
    .uart_xbar_noc3_data        (uart_buf_noc3_data ),
    .xbar_uart_noc3_ready       (buf_uart_noc3_ready),

    // output to noc2
    .uart_xbar_noc2_valid       (uart_filter_noc2_valid),
    .uart_xbar_noc2_data        (uart_filter_noc2_data ),
    .xbar_uart_noc2_ready       (filter_uart_noc2_ready),

    // input from noc3
    .xbar_uart_noc3_valid       (filter_uart_noc3_valid),
    .xbar_uart_noc3_data        (filter_uart_noc3_data ),
    .uart_xbar_noc3_ready       (uart_filter_noc3_ready)
);''' % (i)
%>
`else // ifndef PITONSYS_UART
    assign uart_interrupt = 1'b0;
    assign test_start = 1'b1;
`endif // endif PITONSYS_UART


eth_top  eth_top (
    .chipset_clk            (clk                ),
    .rst_n                  (rst_n              ),

    .net_interrupt          (net_interrupt      ),

    .noc_in_val             (buf_net_noc2_valid   ),
    .noc_in_data            (buf_net_noc2_data  ),
    .noc_in_rdy             (net_buf_noc2_ready   ),

    .noc_out_val            (net_buf_noc3_valid   ),
    .noc_out_data           (net_buf_noc3_data  ),
    .noc_out_rdy            (buf_net_noc3_ready   ),

    .net_axi_clk            (net_axi_clk        ),
    .net_phy_rst_n          (net_phy_rst_n      ),

    .net_phy_tx_clk         (net_phy_tx_clk     ),
    .net_phy_tx_en          (net_phy_tx_en      ),
    .net_phy_tx_data        (net_phy_tx_data    ),
    
    .net_phy_rx_clk         (net_phy_rx_clk     ),
    .net_phy_dv             (net_phy_dv         ),    
    .net_phy_rx_data        (net_phy_rx_data    ),
    .net_phy_rx_er          (net_phy_rx_er      ),
    
    .net_phy_mdio_io        (net_phy_mdio_io    ),
    .net_phy_mdc            (net_phy_mdc        )
);

endmodule
