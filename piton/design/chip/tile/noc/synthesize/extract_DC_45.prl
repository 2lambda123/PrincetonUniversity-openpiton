#!/usr/bin/perl -w
use Cwd qw(getcwd);
use IPC::Run qw( run start pump finish timeout );



my @HWs = (
"Total cell area:",
"data arrival time                                                 -",
"Total Dynamic Power"

);



my $csv="";
my %freq;
my %results;

sub extract_results {
 	my ($dir,$parent) =@_;
	my @cat = qw( bash  ); 
	chdir "$dir";
	print getcwd()."\n";
	
	my ($in, $out, $err); 	
	
	foreach my $hw (@HWs){
		
		
		
		my @cat = qw( bash  );
		my $in ="grep -R \"$hw\" | sort";
		$hw =~ s/[\;]//g;
		
		#$csv.="-,$hw\n";
		$out=undef;		
		run \@cat, \$in, \$out, \$err, timeout( 10 ) or die "grep: $?";
		@lines = split("\n",$out);
		
		foreach my $l (@lines)  {
			#unless ( index($l,".fit.rpt") >= 0){ next;}
			
			
			my @f=split ('/',$l);	
			 
			my $name= "${parent}_$f[0]";
			#print "$name:$l\n";
			$l =~ s/\s+/ /g;
			my @ff = split (/:/,$l);
            my $val=$ff[2];
            my @ff = split (/=/,$ff[1]) if (!defined $val);
            $val=$ff[1] if (!defined $val);
			@ff = split (/-/,$ff[0]) if (!defined $val);
			$val=$ff[1] if (!defined $val);
			
		   # print "$name:$l   $val**\n";
			
			#$val =~ s/,//g;
			my @vv = split (" ",$val);
			#my $t =join(',',@vv);
			#$csv.= "$name, $t  \n" if (defined $val) ;
			$results{$hw}{$name}=$val if (defined $val) ;
		}
	}

}

extract_results("$ENV{PITON_ROOT}/build/asic_piton",'piton_mesh');
extract_results("$ENV{PITON_ROOT}/build/asic_pronoc",'noc_top');




foreach my $p (sort keys  %results){
	my $ref = $results{$p};
	my %r = %{$results{$p}} if (defined $ref) ;
	$csv.= "\n\n\n\n" ;	
	$csv.="-,$p\n";
	foreach my $p (sort keys  %r){
		$csv.= "$p, $r{$p}  \n";
	}

}

print "***************** results *****************\n";	
	print $csv;

