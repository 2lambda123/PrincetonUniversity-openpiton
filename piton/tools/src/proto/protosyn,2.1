#!/usr/bin/python
# Copyright (c) 2015 Princeton University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Princeton University nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#####################################################################
#  Filename      : protosyn.py
#  Version       : 2.1
#  Created On    : 2014-05-10
#  Author        : Alexey Lavrov
#  Company       : Princeton University
#  Email         : openpiton@princeton.edu
#
#  Description   : top level script for Piton synthesis flow
#
#####################################################################

import os, sys, re, make_mem_map, subprocess
from optparse import OptionParser

DV_ROOT = os.environ['DV_ROOT']
MODEL_DIR = os.environ['MODEL_DIR']
DEFAULT_DEFINES = ["NO_SCAN", "FPGA_SYN", "FPGA_SYN_1THREAD", "NO_USE_IBM_SRAMS", 
                   "PITON_PROTO", "PITON_FPGA_SYNTH", "PITON_FPGA_NO_DMBR"]

FPGA_CORE_REF_FREQ = {"vc707":67, "genesys2":50, "nexysVideo":30}    # MHz
FPGA_DDR_SIZE = {"vc707":1024, "genesys2":1024, "nexysVideo":512}    # Mbytes
UART_BAUD_RATE = 115200

def usage():
    print >> sys.stderr
    print >> sys.stderr, "Usage:\nprotosyn -b <board_type> [--bram-test <test_name> | --bram-boot]",
    print >> sys.stderr, "[--from <FPGA flow step>] [--to <FPGA flow step>] [--no-ddr] [--uart-dmw]"
    print >> sys.stderr
    print >> sys.stderr, "       -b, --board  <board_type>"
    print >> sys.stderr, "              Name of a supported Xilinx's development board. Available options are:"
    print >> sys.stderr, "                  nexys4ddr*"
    print >> sys.stderr, "                  vc707"
    print >> sys.stderr, "                  genesys2"
    print >> sys.stderr, "                  nexysVideo"
    print >> sys.stderr, "\n                  * current configuration of design doesn't fit on this board"
    print >> sys.stderr, "\n       --bram-test <test_name>"
    print >> sys.stderr, "              Name of the test to be mapped into BRAM"
    print >> sys.stderr, "\n       --bram-boot"
    print >> sys.stderr, "              Implement design with OpenBoot mapped to a BRAM"
    print >> sys.stderr, "\n       --no-ddr"
    print >> sys.stderr, "              Implement design without DDR memory"
    print >> sys.stderr, "\n       --uart-dmw"
    print >> sys.stderr, "              Implement design with Direct Memory Write (DMW) from UART module turned on"
    print >> sys.stderr, "\n       --make-mem-map"
    print >> sys.stderr, "              Create a mapping of test specified by --bram-test option to a BRAM"
    print >> sys.stderr, "\n       --from <step>"
    print >> sys.stderr, "              Start FPGA flow from a specified step. Available options are:"
    print >> sys.stderr, "                  project"
    print >> sys.stderr, "                  impl"
    print >> sys.stderr, "\n       --to  <step>"
    print >> sys.stderr, "              Run FPGA flow to a specified step (including). Available options are:"
    print >> sys.stderr, "                  project"
    print >> sys.stderr, "                  impl"
    print >> sys.stderr, "\n       -h, --help"
    print >> sys.stderr, "              Display this help message"
    print >> sys.stderr, "\n"

def makeProject(board):
    prev_dir = os.getcwd()

    os.chdir(os.path.join(MODEL_DIR, board))
    os.system('cp -r $DV_ROOT/tools/src/proto/%s/* .' % board)
    os.system('cp -r -n $DV_ROOT/tools/src/proto/common/* .')
    print >> sys.stderr, "Creating Vivado project for %s" % board
    proj_script = board + "_piton_project.tcl"
    flog = open("protosyn_logs/make_project.log", "w")
    subprocess.call(["vivado", "-mode", "batch", "-source", proj_script], stdout=flog)
    flog.close()

    os.chdir(prev_dir)

def runImplFlow(board, def_list):
    prev_dir = os.getcwd()


    os.chdir(os.path.join(MODEL_DIR, board))
    f = open("flow", "w")
    print >> f, "open_project %s_piton.xpr" % board
    print >> sys.stderr, "Using next defines:"
    all_def = ' '.join(DEFAULT_DEFINES) + ' ' + ' '.join(def_list)
    print >> sys.stderr, all_def
    print >> f, "set_property verilog_define \"%s\" [get_fileset sources_1]" % all_def
    # dealing with Vivado case, when it locks IPs as old ones
    print >> f, "upgrade_ip [get_ips -all]"
    print >> f, "close_project"
    # extra open/close to make Vivado use defines for a project,
    # not only for synthesis
    print >> f, "open_project %s_piton.xpr" % board
    print >> f, "launch_run impl_1 -to_step write_bitstream"
    f.close()

    dname = board + "_piton"
    os.chdir(dname)
    print >> sys.stderr, "Running FPGA implementation down to bitstream generation"
    flog = open("../protosyn_logs/implementation.log", "w")
    subprocess.call(["vivado", "-mode", "batch", "-source", "../flow"], stdout=flog)
    flog.close()

    os.chdir(prev_dir)

def checkCmdOptions(options):
    if (options.help):
        usage()
        exit(0)

    # Check if board name is provided
    if (options.board == None):
        print >> sys.stderr, "Error: invalid parameters"
        usage()
        exit(2)

    # Check if board is supported
    if (options.board not in ['nexys4ddr', 'vc707', 'genesys2', 'nexysVideo']):
        print >> sys.stderr,  "Error: unsupported board"
        usage()
        exit(2)

    # Check if FPGA steps are valid (if provided)
    if (options.from_step != None):
        if (options.from_step not in ['project', 'impl']):
            print >> sys.stderr, "Error: not a valid FPGA flow step"
            usage()
            exit(2)

    if (options.to_step != None):
        if (options.to_step not in ['project', 'impl']):
            print >> sys.stderr, "Error: not a valid FPGA flow step"
            usage()
            exit(2)

    if ((options.test_name != None) and options.bram_boot):
        print >> sys.stderr, "Error: conflicting options"
        usage()
        exit(2)

    if (options.make_mem_map and (options.test_name == None)):
        print >> sys.stderr, "Error: test name is required to make a mapping to a BRAM"
        usage()
        exit(2)

def setParserOptions(parser):
    parser.add_option("-b", "--board", dest="board", action="store")
    parser.add_option("--bram-test", dest="test_name", action="store")
    parser.add_option("--from", dest="from_step", action="store", default=None)
    parser.add_option("--to", dest="to_step", action="store", default=None)
    parser.add_option("--no-ddr", dest="no_ddr", action="store_true", default=False)
    parser.add_option("--bram-boot", dest="bram_boot", action="store_true", default=False)
    parser.add_option("--uart-dmw", dest="uart_dmw", action="store_true", default=False)
    parser.add_option("-h", "--help", dest="help", action="store_true", default=False)
    parser.add_option("--gen-test-bram", dest="gen_test_bram", action="store_true", default=False)  # depricated ?
    parser.add_option("--make-mem-map", dest="make_mem_map", action="store_true", default=False)

    return parser

def makeDefList(options):
    defines = list()

    df = options.board.upper() + "_BOARD"
    defines.append(df)

    # --no-ddr option
    if options.no_ddr == True:
        pass
    else:   # default option
        defines.append("PITON_FPGA_MC_DDR3")

    # do not use SD controller if BRAM is used for boot or a test
    if ((options.test_name != None) or options.bram_boot):
        pass
    else:   # default option
        defines.append("PITON_FPGA_SD_BOOT")

    # --bram-test option
    if options.test_name != None:
        defines.append("PITON_FPGA_BRAM_TEST")

    # --bram-boot option
    if options.bram_boot == True:
        defines.append("PITON_FPGA_BRAM_BOOT")

    # --uart-dmw option
    if options.uart_dmw == True:
        defines.append("PITON_FPGA_UART_DMW")

    return defines

def makeMemMapping(board, tname, log_dir):
    prev_dir = os.getcwd()

    os.chdir(MODEL_DIR)
    print >> sys.stderr, "Starting mapping of a test"
    make_mem_map.makeMapping(tname)
    os.system('mv test_proto.coe %s' % board)
    os.system('mv bram_map.v %s' % board)
    os.system('mv make_mem_map.log %s' % log_dir)
    os.system('mv bram_map.log %s' % log_dir)

    os.chdir(prev_dir)


def main():
    parser = OptionParser(add_help_option=False)
    parser = setParserOptions(parser)
    (options, args) = parser.parse_args()

    checkCmdOptions(options)
    

    ###################################################
    # All options are considered valid from this point
    ###################################################

    work_dir = options.board
    log_dir = work_dir + '/protosyn_logs'

    # Make a list of configuration specific defines
    defines = makeDefList(options)


    run_sim                 = False
    run_map_test            = False
    run_make_project        = True
    run_fpga_impl           = True
    run_gen_test_bram       = False

    if options.test_name != None:
        run_sim             = True
        run_map_test        = True

    if options.bram_boot == True:
        pass    # will start from project

    if options.from_step == 'impl':
        run_make_project    = False

    if options.to_step == 'project':
        run_fpga_impl       = False

    if options.gen_test_bram == True:
        run_make_project    = False
        run_fpga_impl       = False
        run_gen_test_bram   = True

    if options.make_mem_map == True:
        run_map_test        = True
        run_make_project    = False
        run_fpga_impl       = False

    ##################################
    # Setting directory structure
    ##################################
    os.chdir(MODEL_DIR)
    print "Generating .tmp.v files"
    os.system('mkdir -p %s' % log_dir)
    # dummy compilation to get .tmp.v file
    os.system('sims -sys=manycore -x_tiles=1 -y_tiles=1 -vcs_build > /dev/null')

    ##################################
    # Get a trace
    ##################################
    if run_sim:
        print "Synthesizing a test: %s" % options.test_name
        print "Compilation started"
        ret_val = os.system('sims -sys=manycore -x_tiles=1 -y_tiles=1 -vcs_build -vcs_build_args=+libext+.v -vcs_build_args=-Mupdate > %s/compilation.log' % log_dir)
        if ret_val != 0:
            print >> sys.stderr, "Compilation didn't finish successfully!"
            print >> sys.stderr, "See for Errors in %s/compilation.log" % log_dir
            exit(1)
        print "Simulation started"
        print "Using core clock frequency: %d MHz" % FPGA_CORE_REF_FREQ[options.board]
        div = (FPGA_CORE_REF_FREQ[options.board] * 10**6) / (16 * UART_BAUD_RATE);
        div = int(round(div))
        os.system('sims -sys=manycore -vcs_run -midas_args=-DUART_DIV_LATCH=0x%x %s > %s/simulation.log' % (div, options.test_name, log_dir))

        f = open('%s/simulation.log' % log_dir, 'r')
        cont = f.read()
        f.close()
        match = re.search(r'(HIT GOOD TRAP)', cont)
        if match == None:
            print "Test failed!"
            exit(1)
        else:
            print "Test Passed!"


    ###################################
    # Make Mapping
    ###################################
    if run_map_test:
        makeMemMapping(options.board, options.test_name, log_dir)        

    ##################################
    # Run FPGA flow
    ##################################
    if run_make_project:
        makeProject(options.board)

    ## TODO: update this options for simulations from VCS
    if run_gen_test_bram:
        print >> sys.stderr, "Regenerating a bram with a test"
        os.chdir(MODEL_DIR + '/' + work_dir)
        os.system('vivado -mode batch -source gen_test_bram')

    if run_fpga_impl:
        runImplFlow(options.board, defines)
            
        print >> sys.stderr, "Synthesis finished!"
        print >> sys.stderr, "Note: Some jobs can be running as separate processes"

    print >> sys.stderr, "\nProtosyn finished!"


if __name__ == "__main__":
    main()
