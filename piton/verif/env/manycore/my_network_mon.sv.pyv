// Modified by Princeton University on June 9th, 2015
// ========== Copyright Header Begin ==========================================
//
// OpenSPARC T1 Processor File: cmp_l15_messages_mon.v
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
//
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
//
// The above named program is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
//
// ========== Copyright Header End ============================================
////////////////////////////////////////////////////////

`include "sys.h"
`include "iop.h"
`include "cross_module.tmp.h"


<%
    import os
    import sys
    sys.path.insert(0, os.path.join(os.environ["DV_ROOT"], 'tools/bin/'));
    from pyhplib import *

    print("`define PITON_NUM_TILES " + repr(PITON_NUM_TILES))
    print("`define PITON_X_TILES " + repr(PITON_X_TILES))
    
    if (PITON_NETWORK_CONFIG == "xbar_config"):
        print("`define XBAR_CONFIG")
%>

`ifndef USE_TEST_TOP // useless for older TOPs


module my_network_mon (
    input wire clk
    );

`ifdef PITON_MANYGUI
`ifndef XBAR_CONFIG



integer    fd;  
integer    counter = 0;
integer    target;
integer    chipID;

parameter HEADER = 0, PAYLD_ADR_SIZE = 1, PAYLOAD = 2;

initial begin
    fd = $fopen("debug/traffic_router.txt", "w");
    $fwrite(fd,"time \tcurr\tsrvc\tpayld\tbdw\tNoC\tInPort\ttarget_router\n"); 
    //$fwrite(fd,"time \tcurr\tsrvc\tpayld\tbdw\tNoC\tInPort\ttarget_router\tfullHeader\n"); 
    $fclose(fd);   
end



`ifdef PITON_PRONOC
   
    `define NOC1 `CHIP.noc1.noc.tori_noc.noc_top.router_chan_in
    `define NOC2 `CHIP.noc2.noc.tori_noc.noc_top.router_chan_in
    `define NOC3 `CHIP.noc3.noc.tori_noc.noc_top.router_chan_in
    `define JTAG_FLATID_WIDTH 8
    
    localparam    L   =   0,
                  E   =   1,
                  N   =   2, 
                  W   =   3,
                  S   =   4;
    
    localparam [`NOC_CHIPID_WIDTH-1 : 0] DEFAULT_CHIPID = {`NOC_CHIPID_WIDTH{1'b0}};

    logic [`NOC_DATA_WIDTH-1:0] router_buffer_data_noc1 [`PITON_NUM_TILES-1 : 0] [4:0];
    logic [4:0] router_buffer_data_val_noc1 [`PITON_NUM_TILES-1 : 0] ;
    logic [4:0] router_buffer_consumed_noc1 [`PITON_NUM_TILES-1 : 0];
    
    logic [`NOC_DATA_WIDTH-1:0] router_buffer_data_noc2 [`PITON_NUM_TILES-1 : 0] [4:0];
    logic [4:0]  router_buffer_data_val_noc2 [`PITON_NUM_TILES-1 : 0];
    logic [4:0]  router_buffer_consumed_noc2 [`PITON_NUM_TILES-1 : 0];
    
    logic  [`NOC_DATA_WIDTH-1:0] router_buffer_data_noc3 [`PITON_NUM_TILES-1 : 0] [4:0] ;
    logic  [4:0] router_buffer_data_val_noc3 [`PITON_NUM_TILES-1 : 0] ;
    logic  router_buffer_consumed_noc3 [`PITON_NUM_TILES-1 : 0] [4:0];
    
    
    logic reset;    
    always @(posedge clk) begin     
        if(counter >3) reset=0;
        else     reset =1;  
    end
    
    
    genvar k,p;
    generate
    for(k=0; k<`PITON_NUM_TILES; k++) begin :tile_
        localparam DEAF_X = k% `PITON_X_TILES;
        localparam DEAF_Y = k/ `PITON_X_TILES;
        for(p=0; p<5; p++) begin :port_
            localparam [`JTAG_FLATID_WIDTH-1:0] FLAT_ID = k[`JTAG_FLATID_WIDTH-1:0];
            
            pronoc_to_piton_wrapper  #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(1)) pr2pi_wrapper1
            (
                .default_chipid(DEFAULT_CHIPID), 
                .default_coreid_x(DEAF_X[`NOC_X_WIDTH-1:0] ), 
                .default_coreid_y(DEAF_Y[`NOC_Y_WIDTH-1:0] ),
                .flat_tileid(FLAT_ID),    
                .reset(reset),
                .clk (clk),
                .dataOut(router_buffer_data_noc1[k][p]),
                .validOut(router_buffer_data_val_noc1[k][p]),
                .yummyOut(router_buffer_consumed_noc1[k][p]),
                .chan_in(`NOC1[k][p]),
                .current_r_addr_o()
            ); 
            
             pronoc_to_piton_wrapper  #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(2)) pr2pi_wrapper2
            (
                .default_chipid(DEFAULT_CHIPID), 
                .default_coreid_x(DEAF_X[`NOC_X_WIDTH-1:0] ), 
                .default_coreid_y(DEAF_Y[`NOC_Y_WIDTH-1:0] ),
                .flat_tileid(FLAT_ID),    
                .reset(reset),
                .clk (clk),
                .dataOut(router_buffer_data_noc2[k][p]),
                .validOut(router_buffer_data_val_noc2[k][p]),
                .yummyOut(router_buffer_consumed_noc2[k][p]),
                .chan_in(`NOC2[k][p]),
                .current_r_addr_o()
            ); 
            
            
             pronoc_to_piton_wrapper  #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(3)) pr2pi_wrapper3
            (
                .default_chipid(DEFAULT_CHIPID), 
                .default_coreid_x(DEAF_X[`NOC_X_WIDTH-1:0] ), 
                .default_coreid_y(DEAF_Y[`NOC_Y_WIDTH-1:0] ),
                .flat_tileid(FLAT_ID),    
                .reset(reset),
                .clk (clk),
                .dataOut(router_buffer_data_noc3[k][p]),
                .validOut(router_buffer_data_val_noc3[k][p]),
                .yummyOut(router_buffer_consumed_noc3[k][p]),
                .chan_in(`NOC3[k][p]),
                .current_r_addr_o()
            ); 
            
               
        end   
    end    
    endgenerate
    

`endif


//Keeps the status of each packet entering in routers
<%
for y in range (PITON_Y_TILES):
        for x in range (PITON_X_TILES):
            flatid = x + (y * PITON_X_TILES);
            for nocid in [0,1,2]:
                for dir in ['L', 'N', 'S', 'E', 'W']:
                    print ("integer tile%d_noc%d_in%s_packet_state = HEADER;" % (flatid, nocid, dir))
                    print ("integer tile%d_noc%d_in%s_bdw_allocation = 0;" % (flatid, nocid, dir))
                    print ("integer tile%d_noc%d_in%s_payload_counter = 0;" % (flatid, nocid, dir))
                    print ("reg [1:0][`NOC_DATA_WIDTH-1:0] tile%d_noc%d_in%s_header = '0;" % (flatid, nocid, dir))
                    
%>


always @ (posedge clk)
begin
    counter <= counter + 1;
<%
    for y in range (PITON_Y_TILES):
        for x in range (PITON_X_TILES):
            for nocid in [0,1,2]:
                for dir in ['L', 'N', 'S', 'E', 'W']:
                    flatid = x + (y * PITON_X_TILES);
                    print ("`ifdef PITON_PRONOC")
                    print ("   	if (router_buffer_data_val_noc%d[%d][%s])" % (nocid+1,flatid,dir))                    
                    print ("`else")
                    if dir == 'L':
                        print ("    if (`TILE%d.buffer_router_valid_noc%d)" % (flatid, nocid+1))
                    else:
                        print ("    if (`TILE%d.dyn%d_validIn_%s)" % (flatid, nocid, dir))
                    print ("`endif")                    
                    print ("    begin")
                    print ("         case (tile%d_noc%d_in%s_packet_state)" % (flatid, nocid, dir))
                    print ("         HEADER:")
                    print ("         begin")
                    print ("             tile%d_noc%d_in%s_bdw_allocation = counter;" % (flatid, nocid,dir))
                    if dir == 'L':
                        print ("`ifdef PITON_PRONOC")                        
                        print ("             tile%d_noc%d_in%s_payload_counter = router_buffer_data_noc%d[%d][%s][`MSG_LENGTH];" % (flatid, nocid, dir, nocid+1,flatid, dir))
                        print ("             tile%d_noc%d_in%s_header[0] = router_buffer_data_noc%d[%d][%s];" % (flatid, nocid, dir, nocid+1, flatid, dir))
                        print ("`else")
                        print ("             tile%d_noc%d_in%s_payload_counter = `TILE%d.buffer_router_data_noc%d[`MSG_LENGTH];" % (flatid, nocid, dir, flatid, nocid+1))
                        print ("             tile%d_noc%d_in%s_header[0] = `TILE%d.buffer_router_data_noc%d;" % (flatid, nocid, dir, flatid, nocid+1))
                        print ("`endif")
                    else: 
                        print ("`ifdef PITON_PRONOC") 
                        print ("             tile%d_noc%d_in%s_payload_counter = router_buffer_data_noc%d[%d][%s][`MSG_LENGTH];" % (flatid, nocid, dir, nocid+1,flatid, dir))
                        print ("             tile%d_noc%d_in%s_header[0] = router_buffer_data_noc%d[%d][%s];" % (flatid, nocid, dir, nocid+1, flatid, dir))
                        print ("`else")
                        print ("             tile%d_noc%d_in%s_payload_counter = `TILE%d.dyn%d_dataIn_%s[`MSG_LENGTH];" % (flatid, nocid, dir, flatid, nocid, dir))
                        print ("             tile%d_noc%d_in%s_header[0] = `TILE%d.dyn%d_dataIn_%s;" % (flatid, nocid, dir, flatid, nocid, dir))
                        print ("`endif")                        
                    print ("             if  (tile%d_noc%d_in%s_payload_counter != 0)"          % (flatid, nocid, dir))
                    print ("                  tile%d_noc%d_in%s_packet_state = PAYLD_ADR_SIZE;" % (flatid, nocid, dir))
                    print ("             else tile%d_noc%d_in%s_packet_state = HEADER;"         % (flatid, nocid, dir))
                    print ("         end")
                    print ("         PAYLD_ADR_SIZE:")
                    print ("         begin")
                    print ("              tile%d_noc%d_in%s_payload_counter = tile%d_noc%d_in%s_payload_counter - 1;" % (flatid, nocid, dir, flatid, nocid, dir))
                    if dir == 'L':
                        print ("`ifdef PITON_PRONOC")                        
                        print ("             tile%d_noc%d_in%s_header[1] = router_buffer_data_noc%d[%d][%s];" % (flatid, nocid, dir, nocid+1, flatid, dir))
                        print ("`else")
                        print ("             tile%d_noc%d_in%s_header[1] = `TILE%d.buffer_router_data_noc%d;" % (flatid, nocid, dir, flatid, nocid+1))
                        print ("`endif")
                    else: 
                        print ("`ifdef PITON_PRONOC") 
                        print ("             tile%d_noc%d_in%s_header[1] = router_buffer_data_noc%d[%d][%s];" % (flatid, nocid, dir, nocid+1, flatid, dir))
                        print ("`else")
                        print ("             tile%d_noc%d_in%s_header[1] = `TILE%d.dyn%d_dataIn_%s;" % (flatid, nocid, dir, flatid, nocid, dir))
                        print ("`endif")                        
                    print ("             if  (tile%d_noc%d_in%s_payload_counter != 0)"   % (flatid, nocid, dir))
                    print ("                  tile%d_noc%d_in%s_packet_state = PAYLOAD;" % (flatid, nocid, dir))
                    print ("             else tile%d_noc%d_in%s_packet_state = HEADER;"  % (flatid, nocid, dir))
                    print ("         end")
                    print ("         PAYLOAD:"  )
                    print ("         begin")
                    print ("              tile%d_noc%d_in%s_payload_counter = tile%d_noc%d_in%s_payload_counter - 1;" % (flatid, nocid, dir, flatid, nocid, dir))
                    print ("             if (tile%d_noc%d_in%s_payload_counter == 0)" % (flatid, nocid, dir))
                    print ("             begin")
                    print ("                 chipID = tile%d_noc%d_in%s_header[0][`MSG_DST_CHIPID];" % (flatid, nocid, dir))
                    print ("                 if (chipID != 0)")
                    print ("                 begin")
                    print ("                     target = chipID;")
                    print ("                 end else begin ")
                    print ("                     target = tile%d_noc%d_in%s_header[0][`MSG_DST_X];" % (flatid, nocid, dir))
                    print ("                     target = (target << 8) | tile%d_noc%d_in%s_header[0][`MSG_DST_Y];" % (flatid, nocid, dir))
                    print ("                 end")
                    print ("                 fd = $fopen(\"debug/traffic_router.txt\", \"a\");")

                    sys.stdout.write("                 $fwrite(fd,\"%0d\\t%0d\\t%0d\\t%0d\\t%0d\\t%0d\\t%s\\t%0d\\n\", ") #Without header at end
                    #Uncomment line above and comment line below to remove fulleheader
                    #sys.stdout.write("                 $fwrite(fd,\"%0d\\t%0d\\t%0d\\t%0d\\t%0d\\t%0d\\t%s\\t%0d\\t%064x\\n\", ")
                    
                    sys.stdout.write(" tile%d_noc%d_in%s_bdw_allocation," % (flatid, nocid, dir))   #Time that packet enter in the input
                    sys.stdout.write(" %d," % (x << 8 | y))                                         #Current router Address
                    sys.stdout.write(" tile%d_noc%d_in%s_header[0][`MSG_TYPE],"   % (flatid, nocid, dir))    #Service
                    sys.stdout.write(" tile%d_noc%d_in%s_header[0][`MSG_LENGTH]," % (flatid, nocid, dir))    #Payload
                    sys.stdout.write(" (counter - tile%d_noc%d_in%s_bdw_allocation)," % (flatid, nocid, dir))    #Time that packet spent to be transmitted
                    sys.stdout.write(" %d," % (nocid+1))    #Subnoc
                    sys.stdout.write(" \"%s\"," % (dir))    #Input port
                    
                    sys.stdout.write(" target);\n")   #Target Router
                    #Uncomment line above and comment line below to remove fulleheader
                    #sys.stdout.write(" target, tile%d_noc%d_in%s_header[0]);\n" % (flatid, nocid, dir)) #Target Router + full header
                    
                    print ("                 $fclose(fd);")
                    print ("                 tile%d_noc%d_in%s_packet_state = HEADER;" % (flatid, nocid, dir))
                    print ("             end")
                    print ("         end")
                    print ("         endcase" ) 
                    print ("    end")
%>
end




`endif
`endif


endmodule
`endif
